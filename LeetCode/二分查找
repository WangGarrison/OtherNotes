在最简单的形式中，二分查找对具有指定左索引和右索引的连续序列进行操作。这就是所谓的查找空间。二分查找维护查找空间的左、右和中间指示符，并比较查找目标或将查找条件应用于集合的中间值；如果条件不满足或值不相等，则清除目标不可能存在的那一半，并在剩下的一半上继续查找，直到成功为止。如果查以空的一半结束，则无法满足条件，并且无法找到目标O(logn)

## 二分查找(基本形式)

> 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。

```c
int search(int* nums, int numsSize, int target)
{
    if(numsSize == 0)	return -1;
    int low = 0, high = numsSize-1;
 
    while(low <= high)
    {
        int mid = low + (high - low) / 2;//不使用int mid = (low+high)/2;避免low+high溢出
        
        if(nums[mid] == target )
        {
            return mid;
        }
        else if(nums[mid] < target)
        {
            low = mid+1;
        }
        else
        {
            high = mid-1;
        }
    }
    return -1;
}
```

## x的平方根

> 实现 int sqrt(int x) 函数。
>
> 计算并返回 x 的平方根，其中 x 是非负整数。
>
> 由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。
>
> 示例 1:
>
> 输入: 4
> 输出: 2
> 示例 2:
>
> 输入: 8
> 输出: 2
> 说明: 8 的平方根是 2.82842...,  //由于返回类型是整数，小数部分将被舍去。

```c
//作弊写法
int mySqrt(int x)
{
    //二分查找
    return sqrt(x);
}
//二分查找
int mySqrt(int x)
{
    int left = 0, right = x;
    int rt;
    while(left <= right)
    {
        int mid = left + (right -left)/2;
        if((long long)mid * mid <= x)
        {
            rt = mid;
            left = mid + 1;
        }
        else
        {
            right = mid - 1;
        }
    }
    return rt;
}
```

## 猜数字大小

> 猜数字游戏的规则如下：
>
> 每轮游戏，我都会从 1 到 n 随机选择一个数字。 请你猜选出的是哪个数字。
> 如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。
> 你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：
>
> -1：我选出的数字比你猜的数字小 pick < num
> 1：我选出的数字比你猜的数字大 pick > num
> 0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num
>
> 示例 1：
>
> 输入：n = 10, pick = 6
> 输出：6
> 示例 2：
>
> 输入：n = 1, pick = 1
> 输出：1
> 示例 3：
>
> 输入：n = 2, pick = 1
> 输出：1

```c
/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is lower than the guess number
 *			      1 if num is higher than the guess number
 *               otherwise return 0
 * int guess(int num);
 */

int guessNumber(int n)
{
    //二分查找
    int left = 0, right = n;
    while(left <= right)
    {
        int mid = left + (right - left) / 2;
        if(guess(mid) == 0)//猜对了
        {
            return mid;
        }
        else if(guess(mid) == 1)//选出的数字比mid大
        {
            left = mid + 1;
        }
        else//选出的数字比mid小
        {
            right = mid - 1;
        }

    }
    return -1;
}
```

## 第一个错误版本

> 你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。
>
> 假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。
>
> 你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。
>
> 示例:
>
> 给定 n = 5，并且 version = 4 是第一个错误的版本。
>
> 调用 isBadVersion(3) -> false
> 调用 isBadVersion(5) -> true
> 调用 isBadVersion(4) -> true
>
> 所以，4 是第一个错误的版本。 

思路：二分查找

```c
// The API isBadVersion is defined for you.
// bool isBadVersion(int version);

int firstBadVersion(int n) 
{
    //二分查找
    int left = 1, right = n;
    while(left<=right)
    {
        int mid = left + (right - left) / 2;
        if(isBadVersion(mid))
        {
            if(!isBadVersion(right-1))  return mid;
            right = mid;
        }
        else
        {
            left = mid + 1;
        }
        
    }
    return -1;
    
}
```

## 寻找峰值

> 峰值元素是指其值大于左右相邻值的元素。
>
> 给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。
>
> 数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。
>
> 你可以假设 nums[-1] = nums[n] = -∞。
>
> 示例 1:
>
> 输入: nums = [1,2,3,1]
> 输出: 2
> 解释: 3 是峰值元素，你的函数应该返回其索引 2。
> 示例 2:
>
> 输入: nums = [1,2,1,3,5,6,4]
> 输出: 1 或 5 
> 解释: 你的函数可以返回索引 1，其峰值元素为 2；
>      或者返回索引 5， 其峰值元素为 6。

思路：

方法一：遍历数组、i，j，k分别判断

```c
int findPeakElement(int* nums, int numsSize)
{
    if(numsSize < 2 || nums[0]>nums[1])    return 0;
    if(nums[numsSize-1]>nums[numsSize-2])   return numsSize-1;
    //遍历数组、i，j，k分别判断
    for(int i=0,j=1,k=2;k<numsSize;i++,j++,k++)
    {
        if(nums[j]>nums[i]&&nums[j]>nums[k])
            return j;
    }

    return -1;
}
```

方法二：二分查找，每次缩小查找空间，若mid比mid+1小，mid处于局部上坡，则峰值在右边，若mid比mid+1大，mid处于局部下坡，则峰值在左边

```c
int findPeakElement(int* nums, int numsSize)
{
    //方法二：
    //特殊情况处理：只有一个值，第一个/最后一个是峰值
    //if(numsSize == 1 || nums[0]>nums[1])   return 0;
    //if( nums[numsSize-1] > nums[numsSize-2]) return numsSize-1;   
    //二分查找，每次缩小查找空间，若mid+1比mid大，mid处于局部上坡，则峰值在右边，若mid+1比mid小，mid处于局部下坡，则峰值在左边
    int left = 0, right = numsSize-1, mid;
    while(left <= right)
    {
        if(left == right)   return left;
        mid = left + (right -left) /2;
        if(nums[mid]<nums[mid+1])//mid处于局部上坡，峰值在右边
        {
            left = mid + 1;
        }
        else//nums[mid]>nums[mid+1],mid处于局部下坡，峰值在左边
        {
            right = mid;//不能写成right=mid+1
        }
    }
    return left;
}
```

## 寻找旋转排序数组的最小值

> 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
>
> ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
>
> 请找出其中最小的元素。
>
> 你可以假设数组中不存在重复元素。
>
> 示例 1:
>
> 输入: [3,4,5,1,2]
> 输出: 1
> 示例 2:
>
> 输入: [4,5,6,7,0,1,2]
> 输出: 0

思路：二分查找，target设置为nums[0], 每次比较mid与target，如果target小于nums[mid]，就在mid右半部分继续找比target小的; 若target比mid大，则最小值在mid及其左边

```c
int findMin(int* nums, int numsSize)
{
    //二分查找，target设置为nums[0], 每次比较mid与target，如果target小于nums[mid]，就在mid右半部分继续找比target小的; 若target比mid大，则最小值在mid及其左边
    if(numsSize == 0)   return -1;
    int left = 0, right = numsSize - 1,target = nums[0];
    while(left <= right)
    {
        int mid = left + (right - left) / 2;
        if(target > nums[mid])//最小值在左边 7 6 0 1 2 3 4 5
        {
            right = mid;
            target = nums[mid];
            continue;
        }
        else//target < nums[mid], 最小值可能在右边  
        {
            left = mid+1;    
        }    
    }
    return target;
}
```

